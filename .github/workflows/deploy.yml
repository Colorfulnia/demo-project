name: CI/CD Pipeline

# 触发条件：推送到 main 分支
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: 构建和测试
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 3. 构建项目
      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      # 4. 运行测试（可选）
      # - name: Run tests
      #   run: ./mvnw test

      # 5. 上传 JAR 文件（供下一个 job 使用）
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  # Job 2: 构建并推送 Docker 镜像
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build  # 依赖 build job

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 下载 JAR 文件
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      # 3. 登录 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 4. 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. 构建并推送镜像
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/demo-project:latest
            ${{ secrets.DOCKER_USERNAME }}/demo-project:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: 部署（可选 - 需要服务器）
  # deploy:
  #   name: Deploy to Server
  #   runs-on: ubuntu-latest
  #   needs: docker
  #
  #   steps:
  #     - name: Deploy via SSH
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SERVER_HOST }}
  #         username: ${{ secrets.SERVER_USER }}
  #         key: ${{ secrets.SERVER_SSH_KEY }}
  #         script: |
  #           cd /path/to/project
  #           docker compose pull
  #           docker compose up -d